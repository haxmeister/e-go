image: golang:latest

variables:
  # Please edit to your GitLab project
  REPO_NAME: gitlab.com/$CI_PROJECT_PATH


cache:
  key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
  paths:
    - cache/

stages:
  - format
  - test
  - build

# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.
before_script:
  - echo "== BEFORE SCRIPT START =="
  - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
  - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
  - cd $GOPATH/src/$REPO_NAME
  - go get -v -d ./...
  - echo "== BEFORE SCRIPT END =="

after_script:
  - echo "== AFTER SCRIPT START =="
  - echo "== AFTER SCRIPT END =="

format-code:
    stage: format
    script:
      - go fmt $(go list ./... | grep -v /vendor/)
      - go vet $(go list ./... | grep -v /vendor/)
      - go test -race $(go list ./... | grep -v /vendor/)

## Use https://github.com/jstemmer/go-junit-report to generate a JUnit report with go
golang-test:
  stage: test
  script:
  - go get -u github.com/jstemmer/go-junit-report
  - go test -v 2>&1 | go-junit-report > report.xml
  artifacts:
    reports:
      junit: report.xml

compile:
    stage: build
    script:
      - go build -race -ldflags "-extldflags '-static'" -o $CI_PROJECT_DIR/e-go
    artifacts:
      paths:
        - e-go
