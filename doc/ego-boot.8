.\" Man page generated from reStructuredText.
.
.TH EGO BOOT 8 "" "2.8.0" "Funtoo Linux Core System"
.SH NAME
ego boot \- Funtoo Linux Boot Loader Module
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH SYNOPSIS
.sp
The standard invocation of the command is as follows with no options or arguments, which causes the settings in
\fI/etc/boot.conf\fP to be applied to the boot loader and the boot menu to be displayed on the screen:
.INDENT 0.0
.INDENT 3.5
\fBego boot\fP
.UNINDENT
.UNINDENT
.sp
Typically, \fBego boot\fP would be run if the contents of \fI/etc/boot.conf\fP were changed by the user, or additional kernels
were installed. This would allow the boot loader menu to reflect these changes. Alternatively, the \fIboot\-update\fP
shortcut can be used:
.INDENT 0.0
.INDENT 3.5
\fBboot\-update\fP
.UNINDENT
.UNINDENT
.sp
This has identical behavior to \fIego boot\fP, updating the current boot loader configuration and displaying the boot
menu.
.SH DESCRIPTION
.sp
\fIboot\-update\fP (now \fIego boot\fP) is a system tool that will generate a boot loader
configuration file based on settings stored in \fIetc/boot.conf\fP\&. \fIego boot\fP was originally created as an enhanced
replacement of the upstream GRUB\-1.97+ configuration system. GRUB\-1.97+\(aqs boot loader configuration file is stored at
\fI/boot/grub/grub.cfg\fP, is quite complex and is not intended to be edited directly by system administrators.
.sp
\fIego boot\fP has since been extended to support GRUB (\fIsys\-boot/grub\fP), GRUB Legacy (\fIsys\-boot/grub\-legacy\fP) and LILO
(\fIsys\-boot/lilo\fP) to boot systems in MBR (legacy) mode. In addition, GRUB also supports auto\-detecting and configuring
UEFI booting. If boot\-update detects that your system has booted in UEFI mode, it will create a UEFI\-compatible
configuration file automatically.
.sp
\fIego boot\fP allows a single file, \fI/etc/boot.conf\fP, to store boot\-related information in a boot\-loader\-independent way,
thus simplifying boot loader configuration and providing advanced features to all popular boot loaders.
.SH USAGE
.sp
Running \fBego boot\fP with no options will update your boot configuration according to \fI/etc/boot.conf\fP\&. An alternate
syntax which performs the same thing is \fBego boot update\fP, or alternatively \fBboot\-update\fP\&. Any of these alternatives
will cause the contents of \fI/etc/boot.conf\fP to be parsed and your GRUB (or other boot loader configuration) to be updated,
along with installing new CPU microcode for your CPU if such packages are available (Intel systems only.)
.sp
It is also possible to run \fBego boot microcode\fP, which will update boot microcode without touching your boot loader
configuration.
.sp
It is possible to use \fBego boot\fP to "attempt" to boot a kernel. By using the following syntax, upon next reboot,
a kernel will be attempted to boot once. If it succeeds, and \fBego boot success\fP is run after startup (typically
from \fB/etc/local.d\fP, then the successfully\-booted kernel will be "promoted" to be the default kernel. If booting
fails and the system OOPSes or halts, the system will reboot in 10 seconds and continue to use the original default
kernel. If \fBego boot success\fP then runs from \fB/etc/local.d\fP, ego will "see" that the attempted kernel is not
running and it will no longer attempt the new kernel on successive boots.
.sp
To specify the kernel to attempt, use the following syntax:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ego boot attempt /boot/kernel\-x.y.z
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Then ensure that the following command gets run as part of your startup process:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ego boot success
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You can use the invocation \fBego boot attempt default\fP to wipe any attempted kernel setting and reset your
boot loader to just boot the default kernel on next boot.
.sp
Other invocations supported by \fBego boot\fP include \fBego boot \-\-show\-defaults\fP, which will show the default
\fB/etc/boot.conf\fP settings, \fBego boot \-\-check\fP which will validate
the syntax of \fB/etc/boot.conf\fP\&. \fBego boot \-\-show sect/key\fP can be used to display a section/key setting
from \fB/etc/boot.conf\fP\&. It is also possible to set the default kernel from the command\-line by using the
invocation \fBego boot \-\-set\-default /boot/kernel\-x.y.z\fP\&. This will set the specified kernel to be the default
kernel and update your boot configuration accordingly.
.SH OPTIONS
.sp
The \fB\-\-device\-shift\fP option can be used in rescue situations when you are temporarily mounting a disk that will
be showing up as another device when it is actually booted. Here is an example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# export ROOT=/mnt/myroot
# mount /dev/sdb3 /mnt/myroot
# mount /dev/sdb1 /mnt/myroot/boot
# ego boot \-\-device\-shift=sdb,sda update
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In the above example, \fB/mnt/myroot\fP is where we have mounted a root and boot filesystem of a disk we are repairing.
\fB/mnt/myroot/etc/fstab\fP refers to its filesystems as \fB/dev/sda1\fP, \fB/dev/sda3\fP, etc. But since we pulled the disk
out of the other system and hooked it up to ours, on our system the disk is recognized as \fB/dev/sda\fP\&. By exporting
\fBROOT\fP to point to the root filesystem of the other disk and using the \fB\-\-device\-shift=sdb,sda\fP option, all
references to \fB/dev/sdbX\fP in the \fB/mnt/myroot/boot/grub/grub.cfg\fP will actually say \fB/dev/sdaX\fP and
\fBego boot update\fP will also process the alternate root filesystem\(aqs \fB/mnt/myroot/etc/fstab\fP file.
.sp
Copyright 2015\-2018 Funtoo Solutions, Inc. and contributors.
.sp
This program is free software; you can redistribute and/or modify it under the terms of the GNU General Public License
version 2 or GNU General Public License version 3. Alternatively you may (at your option) use any other license that has
been publicly approved for use with this program by Funtoo Solutions, Inc. (or its successors, if any.)
.SH SEE ALSO
.sp
boot.conf(5)
.SH AUTHOR
Daniel Robbins <drobbins@funtoo.org>
.\" Generated by docutils manpage writer.
.
