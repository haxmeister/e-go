#!/usr/bin/python3

import os
import pwd
import re
import sys

from cmdtools import run
from ego.module import EgoModule
from ego.output import Color, Output
from ego.config import join_path, EgoConfig
from git_helper import GitHelper
from pathlib import Path

class Module(EgoModule):

	hex_re = re.compile('[0-9a-fA-F]+')
	read_only = False

	@property
	def root(self):
		if not hasattr(self, '_root'):
			if self.options.dest is not None:
				root = self.options.dest
			else:
				root = self.config.meta_repo_root
			if not os.path.exists(os.path.dirname(root)):
				os.makedirs(os.path.dirname(root))
			self._root = root
		return self._root

	@property
	def kits_root(self):
		if not hasattr(self, '_kits_root'):
			if self.options.dest is not None:
				root = self.options.dest + "/kits"
			else:
				root = self.config.kits_root
			# TODO: make 'kits' if no exist?
			if not os.path.exists(os.path.dirname(root)):
				os.makedirs(os.path.dirname(root))
			self._kits_root = root
		return self._kits_root

	def _do_package_moves(self):
		import portage
		from portage._global_updates import _global_updates
		portage.proxy.lazyimport.lazyimport(globals(), '_emerge.actions:adjust_configs,load_emerge_config', )
		try:
			emerge_config = load_emerge_config(action='sync')
			_global_updates(emerge_config.trees, emerge_config.target_config.mtimedb["updates"], quiet=False)
			emerge_config.target_config.mtimedb.commit()
		except portage.exception.ParseError as e:
			Output.warning("Unable to perform package moves due to the following parse error: " + str(e))

	def add_arguments(self, parser):
		parser.add_argument('--kits-only', action='store_true', help="Do not sync meta-repo, only kits.")
		parser.add_argument('--meta-repo-only', dest="meta_only", action='store_true', help="Do not sync kits, only meta-repo.")
		parser.add_argument('--dest', dest="dest", default=None, help="Manually specify destination of meta-repo")
		parser.add_argument('--config-only', dest="config_only", action='store_true', help="Update /etc/portage/repos.conf files only.")

	def sync_kit(self, kit_name, kit_root, branch, default_branch):
		if branch is None:
			Output.fatal("Fatal: branch cannot be None.")
		if branch == default_branch:
			Output.log(Color.purple("Syncing %s branch %s" % (kit_name, branch)))
		else:
			# highlight non-default branches in green for convenience
			Output.log(Color.purple("Syncing %s branch " % kit_name) + Color.green(branch) + Color.purple(" (non-default)"))
		kit_path = os.path.join(kit_root, kit_name)
		kit = GitHelper(self, kit_path)
		if not kit.is_git_repo():
			try:
				os.rmdir(kit.root)
			except OSError:
				pass
		try:
			sha1_data = self.config.kit_sha1_metadata[kit_name][branch]
		except KeyError as e:
			Output.fatal("Fatal: could not find kit %s branch %s. Has it been deprecated?" % ( kit_name, branch ))
		if type(sha1_data) != str:
			# new format
			desired_depth = sha1_data["depth"] if self.config.kits_depth != 0 else 1
			desired_sha1 = sha1_data["sha1"]
		else:
			desired_depth = self.config.kits_depth if self.config.kits_depth != 0 else 1
			desired_sha1 = sha1_data

		if not kit.exists():
			retval = kit.clone(self.config.sync_base_url.format(repo=kit_name), branch, depth=desired_depth)
			if retval != 0:
				Output.fatal("Could not clone kit '%s' into '%s'." % (kit_name, kit_path))
		else:
			if not kit.is_git_repo():
				Output.fatal("Kit %s exists but does not appear to be a git repository. Can't sync." % kit_name)
		if not kit.localBranchExists(branch):
			kit.fetchRemote(branch)
		kit.checkout(branch)
		kit.reset(options=["--hard"])
		kit.clean(options=["-fd"])
		kit.pull(options=["-f", "--no-commit"])

		# TODO: handle transition of auto-generated kit to independently-maintained and vice-versa. Currently not handled.

		try:
			kit_type = self.config.kit_info_metadata["kit_settings"][kit_name]["type"]
		except IndexError:
			kit_type = "AUTO"
		if kit_type == "INDY":
			return True
		else:
			sha1 = kit.commitID
			success = False
			def sha1_check(my_sha1, desired_sha1):
				Output.debug((my_sha1, desired_sha1))
				if not self.hex_re.match(my_sha1):
					Output.fatal("Fatal: kit CommitID not a SHA1: %s" % my_sha1)
				if not self.hex_re.match(desired_sha1):
					Output.fatal("Fatal: kit-sha1.json value not a SHA1: %s" % desired_sha1)

			sha1_check(sha1, desired_sha1)

			if sha1 == desired_sha1:
				success = True
			else:
				kit.fetchRemote(branch)
				sha1 = kit.commitID
				sha1_check(sha1, desired_sha1)
				if sha1 != desired_sha1:
					success = kit.checkout(desired_sha1)
			return success

	def update_repos_conf(self):
		if "kit_order" not in self.config.kit_info_metadata:
			Output.warning(Color.bold("Cannot update repos.conf as meta-repo does not exist."))
			return
		Output.log(Color.bold("Updating %s..." % self.config.repos_conf_path))
		if os.path.islink(self.config.repos_conf_path):
			try:
				os.unlink(self.config.repos_conf_path)
				Output.echo(Color.darkcyan("Upgrading %s symlink to directory...\n" % self.config.repos_conf_path))
			except PermissionError:
				Output.warning("Unable to convert %s to directory; please do so manually." % self.config.repos_conf_path)

		# generate new repos.conf entries:

		if not os.path.exists(self.config.repos_conf_path):
			os.makedirs(self.config.repos_conf_path)
		config_files = set(os.listdir(self.config.repos_conf_path))
		for conf_file in config_files:

			# Clean up any symlinks in here... not a good idea...
			link_path = os.path.join(self.config.repos_conf_path, conf_file)
			if os.path.islink(link_path):
				os.unlink(link_path)

		updated_config_files = set()
		for kit_name in self.config.kit_info_metadata["kit_order"]:
			repo_conf_path = os.path.join(self.config.repos_conf_path, "ego-" + kit_name)
			kit_path = os.path.join(self.config.unprefixed_kits_root, kit_name)
			if kit_name == "nokit":
				kit_priority = -500
			else:
				kit_priority = 1
			with open(repo_conf_path, "w") as f:
				if kit_name == "core-kit":
					f.write("""[DEFAULT]
main-repo = core-kit

""")
				f.write("""[%s]
location = %s
auto-sync = no
priority = %s
""" % ( kit_name, kit_path, kit_priority))
			updated_config_files.add("ego-" + kit_name)

		# clean up any repos.conf entries that begin with "ego-" that are stale:

		for config_file in config_files - updated_config_files:
			if config_file.startswith("ego-"):
				config_file_path = os.path.join(self.config.repos_conf_path, config_file)
				try:
					os.unlink(config_file_path)
				except PermissionError:
					Output.warning("Unable to remove stale repos.conf file: %s. Please remove manually." % config_file_path)

		# clean up legacy funtoo symlink, if it exists...

		if os.path.islink(join_path(self.config.root_path, "/etc/portage/repos.conf/funtoo")):
			os.unlink(join_path(self.config.root_path, "/etc/portage/repos.conf/funtoo"))

	def sync_meta_repo(self):
		if "HOME" in os.environ:
			# git will look here for various things
			del os.environ["HOME"]

		have_uid = False
		if os.path.exists(self.root):
			meta_repo_path = Path(self.root + "/.touch")
			try:
				meta_repo_path.touch()
				have_uid = True
			except PermissionError:
				self.read_only = True
				if not self.options.config_only:
					self.options.config_only = True
					Output.warning("Meta-repo is read-only -- running in config-only mode.")
			finally:
				if meta_repo_path.exists():
					meta_repo_path.unlink()

		uid = None
		gid = None

		if have_uid:
			try:
				pwnam = pwd.getpwnam(self.config.sync_user)
				uid = pwnam.pw_uid
				gid = pwnam.pw_gid
				have_uid = True
			except KeyError:
				Output.warning("Could not find user '%s' -- not dropping permissions." % self.config.sync_user)

		if not self.options.config_only:
			containing_dir = os.path.dirname(self.root)
			if self.options.dest is None:
				if not os.path.exists(containing_dir):
					os.makedirs(containing_dir, 0o775)
				if have_uid:
					stat_info = os.stat(containing_dir)
					try:
						if stat_info.st_uid != uid and self.config.sync_user != "root":
							run("chown %s:%s %s" % (uid, gid, containing_dir), quiet=True)
						if os.path.exists(self.root):
							stat_info = os.stat(self.root)
							if stat_info.st_uid != uid and self.config.sync_user != "root":
								run("chown -R %s:%s %s" % (uid, gid, self.root), quiet=True)
					except PermissionError:
						Output.fatal("Not enough privileges to fix permissions. You should probably run this command as root.")
			# /var/git exists now, and is owned by portage:portage, and is ug=rwx, o=rx. Now we can drop perms and clone:

		kit_stab_ratings = []

		pid = os.fork()
		if pid == 0:
			# in child process.
			os.chdir('/tmp')  # Make sure we are not in /root or other user-forbidden directory
			if self.options.dest is None and self.config.root_path == "/" and have_uid:
				try:
					os.setgid(gid)
					os.setuid(uid)
				except PermissionError:
					Output.fatal("Not enough privileges to switch uid/gid. You should probably run this command as root.")

			if not (self.options.kits_only or self.options.config_only):
				repo = GitHelper(self, self.root)
				Output.log(Color.green("Syncing meta-repo"))
				meta_repo_branch = self.config.meta_repo_branch
				if repo.is_git_repo():

					repo.fetchRemote(meta_repo_branch, options=["--no-recurse-submodules"])
					repo.checkout(meta_repo_branch)
					repo.reset(options=["--hard"])
					repo.clean(options=["-fd"])
					retval = repo.pull(options=["--no-commit", "-f", "--no-recurse-submodules"])
					if retval != 0:
						Output.fatal("There was an error syncing meta-repo.")
					# TODO: get version of metadata and abort if we don't support the metadata version.
					# TODO: track 4 versions: version of metadata, minimum version of metadata support required (for backwards compat), and minimum version/recommended version of ego required.
				elif not repo.exists():
					retval = repo.clone(self.config.sync_base_url.format(repo="meta-repo"), meta_repo_branch)
					if retval != 0:
						Output.fatal("Could not clone meta-repo at '%s'." % (self.root,))
				else:
					Output.fatal("Meta-repo exists but does not appear to be a git repository. Can't sync.")
			fails = []

			we_synced = False
			we_synced_successfully = True

			if not self.options.meta_only and "kit_order" in self.config.kit_info_metadata and not self.read_only:
				if isinstance(self.config.kit_info_metadata["kit_order"], dict):
					kits = self.config.kit_info_metadata["kit_order"]["%s-release" % self.config.release]
				else:
					kits = self.config.kit_info_metadata["kit_order"]
				for kt in kits:
					branch, default_branch = self.config.get_configured_kit(kt)
					if branch is None:
						Output.warning("Could not find %s branch %s; using default kit %s instead." % (kt, branch, default_branch))
						branch = default_branch
					elif self.config.kit_branch_is_missing(kt, branch):
						Output.fatal("Specified %s branch %s is missing! Is it included in this release? Exiting." % (kt, branch))
					elif self.config.kit_branch_is_deprecated(kt, branch):
						Output.warning("Specified %s branch %s has been deprecated." % (kt, branch))
					success = True
					if not self.options.config_only:
						success = self.sync_kit(kt, self.kits_root, branch, default_branch)
						we_synced = True
						if not success:
							we_synced_successfully = False
							fails.append((kt, branch))
					if success:
						# we want to run this in config-only mode:
						stab_rating = self.config.kit_branch_stability(kt, branch)
						if stab_rating not in ["prime"]:
							kit_stab_ratings.append((kt, branch, stab_rating))
				if we_synced and not we_synced_successfully:
					for kt, branch in fails:
						Output.error("There was an error syncing %s." % kt)
				# these exit commands get run by the child process
					sys.exit(1)
			sys.exit(0)

		# Forked process terminated here - now we are back in the parent:

		if os.waitpid(pid, 0)[1] > 0:
			return False

		if not self.options.config_only:
			if self.options.meta_only:
				Output.log(Color.green("Sync successful! :)"))
			else:
				Output.log(Color.green("Sync successful and kits in alignment! :)"))

		# If we are not writing to a special destination for archiving, we want to update our local repos.conf and profile settings automatically, as well
		# as possibly run emerge --sync:

		if self.options.dest is None:
			self.update_repos_conf()

			try:
				EgoModule.run_ego_module('profile', self.config, ['update'])
			except PermissionError:
				Output.error("Could not update ego profiles automatically due to permissions (code in /root, most likely.)")
				Output.error("Please run 'epro update' manually as root.")

		if self.config.root_path == "/":
			repos_configs = os.listdir("/etc/portage/repos.conf")
			foreign_repo = False
			for repoitem in repos_configs:
				if not repoitem.startswith("ego-"):
					foreign_repo = True
					break
			if foreign_repo:
				Output.log(Color.bold("Updating non-liguros repositories..."))
				run("/usr/bin/emerge --sync --package-moves=n", quiet=True)
			# do package moves and slotmoves...
			self._do_package_moves()
		if len(kit_stab_ratings):
			print()
			Output.log(Color.darkcyan("The following non-prime kits are currently selected:"))
			for kit, branch, rating in kit_stab_ratings:
				kb = "%s %s" % (kit, branch)
				kb = kb.ljust(30)
				Output.log(Color.darkcyan(kb) + Color.red(rating))

		EgoModule.run_ego_module('upgrade', self.config, ['list'])
		EgoModule.run_ego_module('news', self.config, ['release'])

		return True

	def handle(self):
		self.sync_meta_repo()

# vim: ts=4 sw=4 noet
